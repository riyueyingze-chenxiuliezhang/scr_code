# 环境模型相关路径
new_model:
  torch_model_path: 'C:\Users\admi\Desktop\aaa\model\new\models\端对端_25_0204-0306.pth'
  scaler_x_path: 'C:\Users\admi\Desktop\aaa\model\new\models\scalerx_25_0204-0306.pkl'
  scaler_y_path: 'C:\Users\admi\Desktop\aaa\model\new\models\scalery_25_0204-0306.pkl'

old_model:
  torch_model_path: 'C:\Users\admi\Desktop\aaa\model\old\RF_NOx_Temp.pkl'
  scaler_path: 'C:\Users\admi\Desktop\aaa\model\old\scaler.pkl'

  # 老模型根据动作遍历出来的预测出口浓度表
  model_predict_path: 'C:\Users\admi\Desktop\aaa\data\process\handle\old\model_predict.csv'



# research
# 1. 统计五分钟滞后的浓度（按照经验判断）
#   - 五分钟之后 real_outlet_c 超出 target_outlet_c 且当前 action < real_action, 异常
#   - 五分钟之后 real_outlet_c 小于 target_outlet_c 且当前 action > real_action, 异常
#
#           预测动作 < 真实动作      真实浓度 > 目标浓度
# 异常值 1      预测动作 9     <--     真实浓度 28
#              真实动作 12            目标浓度 25
#
#           预测动作 > 真实动作      真实浓度 < 目标浓度
# 异常值 2      预测动作 14    <--     真实浓度 22   真实浓度 < 目标浓度
#              真实动作 12            目标浓度 25
#
#                11:00                  11:05
#
#
# 2. 网络结构降低，统计上述结果
# 3. 奖励修改
# 4. 数据集分类（0302-0402 一个月）
#   - 出口浓度大于目标浓度
#   - 出口浓度小于目标浓度
#   - 目标浓度是 25
#   - 目标浓度是 35
# 5. 两个状态之间距离的度量
# 6. 状态分析
#   - 焦炉煤气阀门开度:               使用阀门开度作为惩罚时可以考虑
#   - 目标浓度:                      目标浓度最大最小归一化后为 0/1 类似切换模型的效果
#   - 煤气压力1热风炉气动阀1前:       固有，单变量状态密集，考虑最大最小归一化
#   - GGH原烟气侧出口温度:            固有，单变量状态密集，考虑最大最小归一化
#   - CEM_脱硝入口烟气流量(工况):     固有，单变量状态密集，考虑最大最小归一化
#   - 入口NO2浓度（折算）:           固有，单变量状态比较密集，考虑最大最小归一化
#   - 出口NO2浓度（折算）:           出口浓度作为控制的最终目标，可能会包含除上述影响因素外的额外信息
#                                  加入上一刻（包含滞后性），可能能使模型从数据学习到隐含状态（在上次会议中，李总说今年的工况比去年的差。），
#                                  但也可能导致模型学习到错误的信息
#
#                                  当训练集中同时包含目标浓度为 25 和 35 的数据时，猜想其概率密度符合双峰函数
#                                  按照理论情况，当目标浓度为 25 时，该特征应该集中在 25 附近
#                                              当目标浓度为 35 时，该特征应该集中在 35 附近
#
#                                  令 a = “目标浓度”， b = “出口NO2浓度”
#                                  由于 (b) 分布依赖于 (a)，可能的问题在于，如果使用全局的 均值和标准差 / 归一化，
#                                  那么当 a=25 时，b 的值可能被压缩到较低的范围，
#                                  而当 a=35 时 b 被压缩到较高的范围。但这样的标准化是否会影响模型的学习？
#                                  比如，模型可能需要识别不同 a 对应的 b 的不同分布，而如果标准化后的 b 在不同 a 的情况下分布重叠，
#                                  可能会影响模型对状态的判断。
#
#                                  另一种方法是分条件处理，即对 a=0 和 a=1 时的 b 分别进行标准化，
#                                  但这样会消除不同a对应的b的原始差异，需要结合 a 的特征来让模型区分不同的情况。
#                                  a 的存在让模型知道当前是哪种情况，从而正确解释 b 的值。